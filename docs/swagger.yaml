openapi: 3.0.0
info:
  title: MarketMate E-commerce API
  version: 1.0.0
  description: MarketMate E-commerce Application API Documentation
  contact:
    name: ''
    url: ''
    email: ''
servers:
  - url: http://localhost:5000
components:
  schemas:
    Product:
      type: object
      required:
        - name
        - description
        - price
        - sku
        - numberOfProductsAvailable
      properties:
        name:
          type: string
          description: The name of the product
        description:
          type: string
          description: The description of the product
        price:
          type: number
          description: The price of the product
        sku:
          type: string
          description: The SKU of the product
        numberOfProductsAvailable:
          type: number
          description: The number of product available
        images:
          type: array
          items:
            type: string
            format: binary
          description: The list of product images
    Cart:
      type: object
      properties:
        user:
          type: string
        cartItems:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
              quantity:
                type: integer
              name:
                type: string
              price:
                type: number
              image:
                type: string
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        isAdmin:
          type: boolean
        resetPasswordToken:
          type: string
        resetPasswordExpire:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        shippingAddress:
          type: object
          properties:
            address:
              type: string
            city:
              type: string
            postalCode:
              type: string
            country:
              type: string
        paymentMethod:
          type: string
        paymentInfo:
          type: object
          properties:
            id:
              type: string
            status:
              type: string
        isDelivered:
          type: boolean
          default: false
        deliveredAt:
          type: string
          format: date-time
        totalPrice:
          type: number
        isPaid:
          type: boolean
          default: false
        paidAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
# tags:
#   - name: Product
#     description: The product managing API
paths:
  /api/product:
    get:
      summary: Returns the list of all the product
      tags: [Product]
      responses:
        200:
          description: The list of the product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /api/product/new:
    post:
      summary: Create a new product
      tags: [Product]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                sku:
                  type: string
                numberOfProductsAvailable:
                  type: number
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        201:
          description: The product was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Some fields are missing
        401:
          description: Unauthorized
  /api/product/update/{sku}:
    put:
      summary: Update a product
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sku
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                numberOfProductsAvailable:
                  type: number
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: The product was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: The SKU is missing
        401:
          description: Unauthorized
        404:
          description: The product was not found
  /api/product/delete/{sku}:
    delete:
      summary: Delete a product
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sku
          schema:
            type: string
          required: true
      responses:
        200:
          description: The product was successfully deleted
        400:
          description: The SKU is missing
        401:
          description: Unauthorized
        404:
          description: The product was not found
  /api/product/{sku}:
    get:
      summary: Get a product by SKU
      tags: [Product]
      parameters:
        - in: path
          name: sku
          schema:
            type: string
          required: true
      responses:
        200:
          description: The product description by SKU
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: The SKU is missing
        404:
          description: The product was not found
  /api/cart/add:
    post:
      summary: Add a product to the cart
      tags: [Cart]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productSKU
                - quantity
              properties:
                product:
                  type: string
                  description: SKU of the product
                quantity:
                  type: integer
                  description: Quantity of the product
      responses:
        '200':
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    type: object
        '400':
          description: Missing product or quantity
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/cart:
    get:
      summary: Retrieve the cart
      tags: [Cart]
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    type: object
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/cart/remove/{productSKU}:
    delete:
      summary: Remove a product from the cart
      tags: [Cart]
      parameters:
        - in: path
          name: productSKU
          schema:
            type: string
          required: true
          description: ID of the product to remove
      responses:
        '200':
          description: Product removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    type: object
        '400':
          description: ProductSKU is missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    $ref: '#/components/schemas/User'
        '400':
          description: Incomplete or invalid user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/auth/login:
    post:
      summary: Log in a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    $ref: '#/components/schemas/User'
        '400':
          description: Incomplete details or invalid user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/user/forgot-password:
    post:
      summary: Send password reset email
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Email is missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: User with this email does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/user/reset-password/{token}:
    post:
      summary: Reset user password
      tags: [User]
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Token is invalid or expired, or new password is missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/app/status:
    get:
      summary: Get the status of the application
      tags: [App]
      responses:
        '200':
          description: Application status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  redisActive:
                    type: boolean
                  dbActive:
                    type: boolean

  /api/app/stats:
    get:
      summary: Get statistics of the application
      tags: [App]
      responses:
        '200':
          description: Application statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalNumberOfUsers:
                    type: integer
                  totalNumberOfProducts:
                    type: integer
                  totalNumberOfOrders:
                    type: integer

  /api/order/create:
    post:
      summary: Create a new order
      tags: [Order]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - orderItems
                - totalPrice
                - paymentInfo
              properties:
                orderItems:
                  type: array
                  items:
                    $ref: '#/components/schemas/Order'
                totalPrice:
                  type: number
                paymentInfo:
                  type: object
                  properties:
                    method:
                      type: string
                    transactionId:
                      type: string
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/order/{orderId}:
    get:
      summary: Get an order by OrderId
      tags: [Order]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Missing orderId
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/order/user/myorders:
    get:
      summary: Get orders by UserId
      tags: [Order]
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '404':
          description: No orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/order/all:
    get:
      summary: Get all orders
      tags: [Order]
      responses:
        '200':
          description: All orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '404':
          description: No orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /payment/pay:
    post:
      summary: Process a payment
      tags: [Payment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - currency
                - paymentMethodId
                - shippingDetails
              properties:
                amount:
                  type: number
                currency:
                  type: string
                paymentMethodId:
                  type: string
                shippingDetails:
                  type: object
                  properties:
                    address:
                      type: string
                    city:
                      type: string
                    postalCode:
                      type: string
                    country:
                      type: string
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Missing required fields or cart is empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string