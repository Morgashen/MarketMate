version: "3.8"

services:
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    # Adding health checks ensures other services wait for Redis to be truly ready
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis-data:/data
    # Adding restart policy for better reliability
    restart: unless-stopped
    command: redis-server --appendonly yes # Enable persistence

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      # Adding security settings
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: srvr,ruok,wchs,wchc
    networks:
      - backend
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Improved listener configuration for better container networking
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Additional settings for better performance
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  app:
    image: node:18-alpine # Updated to a modern, secure version
    container_name: app
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    working_dir: /usr/src/app
    command: sh -c "npm install && node server.js" # Added npm install step
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      # Using environment variables for sensitive data
      MONGODB_URI: ${MONGODB_URI}
      REDIS_HOST: redis
      REDIS_PORT: 6479
      KAFKA_BROKER: kafka:29092
      # Additional security settings
      NODE_OPTIONS: --max-old-space-size=2048
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  backend:
    driver: bridge
    # Added network configuration for better isolation
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  node_modules:
